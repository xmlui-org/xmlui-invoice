name: Build All-In-One Release Package

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release version (e.g. v1.0.0)'
        required: true
      server_version:
        description: 'XMLUI test server version to include (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create-all-in-one:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repo
        uses: actions/checkout@v4

      - name: Create all-in-one bundle folder
        run: |
          mkdir -p ./all-in-one-bundle/private ./all-in-one-bundle/xmlui-invoice
          
          # Copy launcher files to root
          cp start.sh start.bat ./all-in-one-bundle/
          
          # Copy app files from xmlui-invoice subdirectory to xmlui-invoice subdirectory
          cp -r xmlui-invoice/* ./all-in-one-bundle/xmlui-invoice/
          
          # Copy sensitive files to private directory
          cp -r private/* ./all-in-one-bundle/private/
          
          # Copy test-server directory
          cp -r test-server ./all-in-one-bundle/

      - name: Download all platform server binaries
        run: |
          mkdir -p ./tmp-downloads

          curl -L -o ./tmp-downloads/xmlui-test-server-linux-amd64.tar.gz \
            "https://github.com/JonUdell/xmlui-test-server/releases/download/${{ github.event.inputs.server_version }}/xmlui-test-server-linux-amd64.tar.gz"

          curl -L -o ./tmp-downloads/xmlui-test-server-macos-intel.tar.gz \
            "https://github.com/JonUdell/xmlui-test-server/releases/download/${{ github.event.inputs.server_version }}/xmlui-test-server-macos-intel.tar.gz"

          curl -L -o ./tmp-downloads/xmlui-test-server-macos-arm64.tar.gz \
            "https://github.com/JonUdell/xmlui-test-server/releases/download/${{ github.event.inputs.server_version }}/xmlui-test-server-macos-arm64.tar.gz"

          curl -L -o ./tmp-downloads/xmlui-test-server-windows-amd64.zip \
            "https://github.com/JonUdell/xmlui-test-server/releases/download/${{ github.event.inputs.server_version }}/xmlui-test-server-windows-amd64.zip"

      - name: Extract and place server binaries
        run: |
          mkdir -p ./tmp-extract-linux ./tmp-extract-macos-intel ./tmp-extract-macos-arm64 ./tmp-extract-windows

          tar -xzf ./tmp-downloads/xmlui-test-server-linux-amd64.tar.gz -C ./tmp-extract-linux
          cp ./tmp-extract-linux/xmlui-test-server ./all-in-one-bundle/test-server/xmlui-test-server-linux-amd64

          tar -xzf ./tmp-downloads/xmlui-test-server-macos-intel.tar.gz -C ./tmp-extract-macos-intel
          cp ./tmp-extract-macos-intel/xmlui-test-server ./all-in-one-bundle/test-server/xmlui-test-server-macos-intel

          tar -xzf ./tmp-downloads/xmlui-test-server-macos-arm64.tar.gz -C ./tmp-extract-macos-arm64
          cp ./tmp-extract-macos-arm64/xmlui-test-server ./all-in-one-bundle/test-server/xmlui-test-server-macos-arm64

          unzip ./tmp-downloads/xmlui-test-server-windows-amd64.zip -d ./tmp-extract-windows
          cp ./tmp-extract-windows/xmlui-test-server.exe ./all-in-one-bundle/test-server/xmlui-test-server-windows-amd64.exe

      - name: Make start scripts executable
        run: chmod +x ./all-in-one-bundle/test-server/start-*.sh

      - name: Create all-in-one ZIP
        run: |
          cd ./all-in-one-bundle
          zip -r ../xmlui-invoice.zip .

      - name: Clean up temporary directories
        run: |
          rm -rf ./all-in-one-bundle
          rm -rf ./tmp-downloads
          rm -rf ./tmp-extract-*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.PAT_TOKEN }}
          tag_name: ${{ github.event.inputs.tag }}
          name: Release ${{ github.event.inputs.tag }}
          files: xmlui-invoice.zip
          body: |
            XMLUI Invoice ${{ github.event.inputs.tag }}

            Includes XMLUI Test Server ${{ github.event.inputs.server_version }}

            âœ… All-In-One Bundle (xmlui-invoice.zip)
            - Supports Linux, macOS (Intel & ARM), Windows
            - Run ./start.sh (Mac/Linux/WSL) or start.bat (Windows) to launch
